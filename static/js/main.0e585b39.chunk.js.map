{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["Length","title","changeTime","type","time","formatTime","id","className","onClick","App","useState","displayTime","setDisplayTime","breakTime","setBreakTime","sessionTime","setSessionTime","timerOn","setTimerOn","onBreak","setOnBreak","colors","setColors","player","useRef","useEffect","currentTime","play","Math","floor","amount","prev","style","color","minutes","seconds","formatDisplayTime","Date","getTime","nextDate","onBreakVariable","interval","setInterval","letters","split","i","random","length","getRandomColor","localStorage","clear","setItem","clearInterval","getItem","pause","ref","t","src","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.0e585b39.chunk.js","sourcesContent":["import './App.scss';\nimport { useState, useEffect, useRef } from 'react'\n\n\nconst audioSrc = \"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\";\n\nfunction App() {\n  const [displayTime, setDisplayTime] = useState(25 * 60);\n  const [breakTime, setBreakTime] = useState(5 * 60);\n  const [sessionTime, setSessionTime] = useState(25 * 60);\n  const [timerOn, setTimerOn] = useState(false);\n  const [onBreak, setOnBreak] = useState(false);\n  const [colors, setColors] = useState('#b2dfdb')\n\n  function getRandomColor() {\n    var letters = 'BCDEF'.split('');\n    var color = '#';\n    for (var i = 0; i < 6; i++ ) {\n        color += letters[Math.floor(Math.random() * letters.length)];\n    }\n    return setColors(color);\n}\n\n  let player = useRef(null);\n  \n  const breakSound = () => {\n    player.currentTime = 0;\n    player.play();\n  }\n\n  useEffect(() => {\n    if(displayTime <= 0){\n      setOnBreak(true);\n      breakSound();\n    }else if(!timerOn && displayTime === breakTime){\n      setOnBreak(false);\n    }\n  }, [breakTime, displayTime, timerOn, sessionTime, onBreak])\n\n  const formatDisplayTime = (time) => {\n    let minutes = Math.floor(time / 60);\n    let seconds = time % 60;\n    return (minutes < 10 ? \"0\" + minutes : minutes) + \":\" + (seconds < 10 ? \"0\" + seconds : seconds)\n  }\n  const formatTime  = (time) => {\n    return Math.floor(time / 60);\n  }\n\n  const changeTime = (amount, type) => {\n    if(type === \"break\"){\n      if((breakTime <= 60 && amount < 0 ) || (breakTime >= 60 * 60 && amount > 0)){\n        return;\n      }\n      setBreakTime((prev) => prev + amount)\n    } else {\n      if((sessionTime <= 60  && amount < 0) || (sessionTime >= 60 * 60  && amount > 0)){\n        return;\n      }\n      setSessionTime((prev) => prev + amount);\n      if(!timerOn){\n        setDisplayTime(sessionTime + amount)\n      }\n    }\n  }\n\n  const controlTime = () => {\n    let second = 1000;\n    let date = new Date().getTime();\n    let nextDate = new Date().getTime() + second;\n    let onBreakVariable = onBreak; \n    \n  if(!timerOn){\n    let interval = setInterval(() => {\n      date = new Date().getTime();\n      if(date > nextDate){\n        setDisplayTime((prev) => {\n          if(prev <= 0 && !onBreakVariable){\n            onBreakVariable = true;\n            return breakTime;\n          }else if (prev  <= 0 && onBreakVariable){\n            onBreakVariable = false;\n            setOnBreak(false);\n            return sessionTime;\n          }\n          return prev - 1;\n        });\n        nextDate += second;\n        getRandomColor();\n      }\n    }, 30)\n    localStorage.clear();\n    localStorage.setItem('interval-id', interval)\n  }\n    if(timerOn){\n      clearInterval(localStorage.getItem('interval-id'));\n    }\n    setTimerOn(!timerOn);\n  };\n\n  const resetTime = () => {\n    clearInterval(localStorage.getItem('interval-id'));\n    setDisplayTime(25 * 60);\n    setBreakTime(5 * 60);\n    setSessionTime(25 * 60);\n    player.pause();\n    player.currentTime = 0;\n    setTimerOn(false);\n    setOnBreak(false);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n          <h1>Pomodoro Clock</h1>\n          <div className=\"dual-container\">\n            <Length \n              title={\"Break Length\"} \n              changeTime={changeTime} \n              type={\"break\"} \n              time={breakTime} \n              formatTime={formatTime} \n            />\n            <Length \n              title={\"Session Length\"} \n              changeTime={changeTime} \n              type={\"session\"} \n              time={sessionTime} \n              formatTime={formatTime}\n            />\n          </div>\n          <div className=\"display\">\n            <h3 id=\"timer-label\">{onBreak ? \"Break\" : \"Session\"}</h3>\n            <h2 id=\"time-left\" style={{color: colors}}>{formatDisplayTime(displayTime)}</h2>\n          </div>\n          <div className=\"display-buttons\">\n            <button id=\"start_stop\" className=\"btn-large teal lighten-2\" onClick={controlTime}>\n              {timerOn ? (\n                <i className=\"material-icons\">pause_circle_filled</i>\n              ) : (\n                <i className=\"material-icons\">play_circle_filled</i>\n            ) }\n            </button>\n            <button id=\"reset\" className=\"btn-large teal lighten-2\" onClick={() => resetTime()}>\n              <i className=\"material-icons\">autorenew</i>\n            </button>\n          </div>          \n        <audio ref={(t) => (player = t)} src={audioSrc} id=\"beep\" />\n      </header>\n      <span id=\"da3ker\" style={{color: colors}}>by da3ker</span>\n    </div>\n  );\n}\n\nfunction Length({title, changeTime, type, time, formatTime }) {\n  return (\n    <div id={type === \"break\" ? \"break-container\" : \"session-container\"}>\n      <h3 id={type === \"break\" ? \"break-label\" : \"session-label\"}>{title}</h3>\n      <div className=\"time-sets\">\n        <button className=\"btn-small teal lighten-2\"\n          onClick={() => {changeTime(-60, type)}}\n          id={type === \"break\" ? \"break-decrement\" : \"session-decrement\"}\n        >\n          <i className=\"material-icons\">keyboard_arrow_down</i>\n        </button>\n        <h3 id={type === \"break\" ? \"break-length\" : \"session-length\"}>{formatTime(time)}</h3>\n        <button className=\"btn-small teal lighten-2\"\n          onClick={() => changeTime(60, type)}\n          id={type === \"break\" ? \"break-increment\" : \"session-increment\"}\n        >\n          <i className=\"material-icons\">keyboard_arrow_up</i>\n        </button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}